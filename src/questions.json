{
    
    "react": {
        "description": "Теоритеческие вопросы на знание React",
        "questions": [
            {
                "id": 1,
                "title": "Что такое React и для чего он используется?",
                "description": "",
                "answers": [
                    {"title": "Библиотека для управления состоянием.", "isCorrect": false},
                    {"title": "Фреймворк для разработки серверных приложений.", "isCorrect": false},
                    {"title": "Библиотека для создания пользовательских интерфейсов.", "isCorrect": true},
                    {"title": "Инструмент для работы с базами данных.", "isCorrect": false}
                ]
            },
            {
                "id": 2,
                "title": "Что такое виртуальный DOM и как он помогает улучшить производительность приложений на React?",
                "description": "",
                "answers": [
                    {"title": "Это копия реального DOM, которую можно напрямую изменять.", "isCorrect": false},
                    {"title": "Это система для хранения данных о состоянии компонента.", "isCorrect": false},
                    {"title": "Это абстракция, которая минимизирует прямые изменения реального DOM.", "isCorrect": true},
                    {"title": "Это специальная версия DOM для мобильных устройств.", "isCorrect": false}
                ]
            },
            {
                "id": 3,
                "title": "Объясните жизненный цикл компонентов в классовых компонентах.",
                "description": "",
                "answers": [
                    {"title": "Монтирование, обновление, размонтирование.", "isCorrect": true},
                    {"title": "Создание, запуск, удаление.", "isCorrect": false},
                    {"title": "Загрузка, обновление, завершение.", "isCorrect": false},
                    {"title": "Инициализация, выполнение, очистка.", "isCorrect": false}
                ]
            },
            {
                "id": 4,
                "title": "Что такое HOC (Higher-Order Component) и для чего он используется?",
                "description": "",
                "answers": [
                    {"title": "Это компонент, который принимает другой компонент в качестве аргумента и возвращает новый компонент.", "isCorrect": true},
                    {"title": "Это компонент для обработки ошибок.", "isCorrect": false},
                    {"title": "Это компонент для управления состоянием.", "isCorrect": false},
                    {"title": "Это компонент для работы с контекстом.", "isCorrect": false}
                ]
            },
            {
                "id": 5,
                "title": "Что такое ключ (key) в списках React-элементов и зачем он нужен?",
                "description": "",
                "answers": [
                    {"title": "Это необязательный пропс, который можно использовать в компоненте по своему усмотрению", "isCorrect": false},
                    {"title": "Это специальный строковый атрибут, который помогает React оптимизировать процесс обновления и перерисовки компонентов в списках.", "isCorrect": true},
                    {"title": "Это атрибут, который позволяет пометить элемент как приоритетный, и он будет обновлен первым", "isCorrect": false}
                ]
            },
            {
                "id": 6,
                "title": "Что такое \"управляемые компоненты\" (controlled components)?",
                "description": "",
                "answers": [
                    {"title": "Это компонент, подписанный на React Context", "isCorrect": false},
                    {"title": "Это кешированный компонент, который обновляется только по мере надобности", "isCorrect": false},
                    {"title": "Это компоненты, в которых значение элемента ввода (например, текстового поля или чекбокса) контролируется состоянием React компонента, а не DOM элементом.", "isCorrect": true},
                    {"title": "Это компоненты, в которых значение элемента ввода (например, текстового поля или чекбокса) контролируется DOM элементом, а не состоянием React компонента.", "isCorrect": false}
                ]
            },
            {
                "id": 7,
                "title": "Какой хук используется в React для обращения к DOM элементу?",
                "description": "",
                "answers": [
                    {"title": "useEffect", "isCorrect": false},
                    {"title": "useMemo", "isCorrect": false},
                    {"title": "useReducer", "isCorrect": false},
                    {"title": "useRef", "isCorrect": true}
                ]
            },
            {
                "id": 8,
                "title": "Как реализуется ленивая загрузка в React?",
                "description": "",
                "answers": [
                    {"title": "В React пока нет такого механизма", "isCorrect": false},
                    {"title": "Для реализации ленивой загрузки, вы можете использовать функцию React.lazy()", "isCorrect": true},
                    {"title": "C помощью сторонних библиотек", "isCorrect": false}
                ]
            },
            {
                "id": 9,
                "title": "Что такое Error Boundary",
                "description": "",
                "answers": [
                    {"title": "Error Boundary - это компонент, который позволяет изолировать ошибки в компонентах, предотвращая падение всего приложения. Это помогает улучшить стабильность интерфейса.", "isCorrect": true},
                    {"title": "Это HOC компонент, для описания логики внутри компонента.", "isCorrect": false},
                    {"title": "Это компонент, в котором определены ошибки приложения и то, как на них реагировать", "isCorrect": false},
                    {"title": "Это паттерн проектирования, который позволяет создавать компоненты, которые обрабатывают исключительные ситуации.", "isCorrect": false}
                ]
            },
            {
                "id": 10,
                "title": "Можно ли в React создавать свои хуки",
                "description": "",
                "answers": [
                    {"title": "Да, но их обязательно надо зарегистрировать", "isCorrect": false},
                    {"title": "Нет, можно использовать только хуки, предоставленные React", "isCorrect": false},
                    {"title": "Да, это просто функция. Свой хук не надо регистрировать", "isCorrect": true}
                ]
            },
            {
                "id": 11,
                "title": "Что такое алгоритм согласования (reconciliation) в React?",
                "description": "",
                "answers": [
                    {"title": "Это процесс сравнения виртуального DOM (VDOM) предыдущего и текущего состояний компонента, чтобы определить, какие изменения необходимо внести в реальный DOM для отражения нового состояния", "isCorrect": true},
                    {"title": "Это процесс копирования DOM и создание на его основе VDOM", "isCorrect": false},
                    {"title": "Это непосредсвенный процесс изменения DOM напрямую", "isCorrect": false},
                    {"title": "Это алгоритм, по которому компоненты кешируются, чтобы не перерисовываться без необходимости", "isCorrect": false}
                ]
            },
            {
                "id": 12,
                "title": "Что такое React Context и когда его следует использовать?",
                "description": "",
                "answers": [
                    {"title": "React Context используется для оптимизации рендеринга компонентов.", "isCorrect": false},
                    {"title": "React Context используется исключительно для управления состоянием формы.", "isCorrect": false},
                    {"title": "React Context позволяет передавать данные через дерево компонентов без необходимости передавать пропсы на каждом уровне.", "isCorrect": true}
                ]
            },
            {
                "id": 13,
                "title": "Что такое 'Hook Rules' в React и какие из них верны?",
                "description": "",
                "answers": [
                    {"title": "Hooks могут вызываться в любом месте внутри компонента.", "isCorrect": false},
                    {"title": "Hooks должны вызываться только на верхнем уровне вашей функции и не внутри циклов, условий или вложенных функций.", "isCorrect": true},
                    {"title": "Hooks должны вызываться только внутри классовых компонентов.", "isCorrect": false}
                ]
            },
            {
                "id": 14,
                "title": "Что делает метод componentDidMount в классовых компонентах?",
                "description": "",
                "answers": [
                    {"title": "Вызывается перед рендерингом компонента.", "isCorrect": false},
                    {"title": "Вызывается сразу после монтирования компонента (вставки в DOM).", "isCorrect": true},
                    {"title": "Вызывается при обновлении компонента.", "isCorrect": false}
                ]
            },
            {
                "id": 15,
                "title": "Как правильно инициализировать состояние с объектом в хук useState?",
                "description": "",
                "answers": [
                    {"title": "useState(() => ({ key: 'value' }))", "isCorrect": false},
                    {"title": "useState({ key: 'value' })", "isCorrect": true},
                    {"title": "useState(() => { key: 'value' })", "isCorrect": false}
                ]
            },
            {
                "id": 16,
                "title": "В чем разница между контролируемыми и неконтролируемыми компонентами в React?",
                "description": "",
                "answers": [
                    {"title": "Неконтролируемые компоненты управляют своим состоянием через пропсы и state, а контролируемые обращаются к DOM элементам.", "isCorrect": false},
                    {"title": "Контролируемые компоненты могут работать только с классами, а неконтролируемые - с функциями.", "isCorrect": false},
                    {"title": "Контролируемые компоненты управляют своим состоянием через пропсы и state, а неконтролируемые обращаются к DOM элементам.", "isCorrect": true}
                ]
            },
            {
                "id": 17,
                "title": "Какой метод жизненного цикла вызывается при удалении компонента из DOM?",
                "description": "",
                "answers": [
                    {"title": "componentWillUnmount", "isCorrect": true},
                    {"title": "componentDidUnmount", "isCorrect": false},
                    {"title": "componentDidRemove", "isCorrect": false}
                ]
            },
            {
                "id": 18,
                "title": "Что такое memoization и как используется React.memo?",
                "description": "",
                "answers": [
                    {"title": "Memoization - это техника оптимизации производительности, где результаты функций сохраняются и повторно используются. React.memo предотвращает ненужные перерисовки функциональных компонентов.", "isCorrect": true},
                    {"title": "Memoization - это метод использования мемо в React-компонентах для хранения состояний. React.memo управляет состоянием функциональных компонентов.", "isCorrect": false},
                    {"title": "Memoization - это процесс разделения кода на мемы. React.memo делает компоненты мемами.", "isCorrect": false}
                ]
            },
            {
                "id": 19,
                "title": "Как использовать useEffect для выполнения эффекта только при монтировании компонента?",
                "description": "",
                "answers": [
                    {"title": "Передать пустой массив [] в качестве второго аргумента useEffect.", "isCorrect": true},
                    {"title": "Передать null в качестве второго аргумента useEffect.", "isCorrect": false},
                    {"title": "Передать пустой объект {} в качестве второго аргумента useEffect.", "isCorrect": false}
                ]
            },
            {
                "id": 20,
                "title": "Что делает хук useReducer и когда его стоит использовать?",
                "description": "",
                "answers": [
                    {"title": "useReducer используется для оптимизации рендеринга, предотвращая лишние перерисовки за счет более грамотного использования состояний", "isCorrect": false},
                    {"title": "useReducer используется для управления состоянием более сложных компонентов, предоставляя альтернативу useState. Когда у вас сложная логика состояния, которая включает в себя несколько значений, или когда следующее состояние зависит от предыдущего", "isCorrect": true},
                    {"title": "useReducer используется только для управления формами, чтобы не создавать множество состояний, для input-ов", "isCorrect": false}
                ]
            },
            {
                "id": 21,
                "title": "Что такое HOC (Higher-Order Component) и как его использовать?",
                "description": "",
                "answers": [
                    {"title": "HOC - это компонент, который всегда находится на вершине иерархии компонентов.", "isCorrect": false},
                    {"title": "HOC - это функция, которая принимает компонент и возвращает новый компонент с добавленной функциональностью.", "isCorrect": true},
                    {"title": "HOC - это компонент, который управляет состоянием других компонентов.", "isCorrect": false}
                ]
            },
            {
                "id": 22,
                "title": "В чем разница между хуками useMemo и useCallback в React?",
                "description": "",
                "answers": [
                    {"title": "useMemo возвращает мемоизированную функцию, а useCallback возвращает мемоизированное значение.", "isCorrect": false},
                    {"title": "useMemo и useCallback выполняют одинаковую функцию и могут использоваться взаимозаменяемо.", "isCorrect": false},
                    {"title": "useMemo работает, если дочерний компонент не обернут в memo, а useCallback нет", "isCorrect": false},
                    {"title": "useMemo возвращает мемоизированное значение, а useCallback возвращает мемоизированную функцию.", "isCorrect": true},
                    {"title": "useCallback не требует массива зависимостей", "isCorrect": false}
                ]
            },
            {
                "id": 23,
                "title": "Что такое иммутабельность и почему она важна в React?",
                "description": "",
                "answers": [
                    {"title": "Иммутабельность означает, что компоненты не могут изменять своё состояние. Это важно для обеспечения производительности.", "isCorrect": false},
                    {"title": "Иммутабельность означает, что объекты не могут быть изменены после их создания. В React это важно для правильного управления состоянием и предотвращения нежелательных побочных эффектов.", "isCorrect": true},
                    {"title": "Иммутабельность означает, что свойства компонентов не могут изменяться после их передачи. Это важно для обеспечения корректной работы контекста.", "isCorrect": false}
                ]
            },
            {
                "id": 24,
                "title": "Какой из следующих методов обеспечивает иммутабельность состояния в React?",
                "description": "",
                "answers": [
                    {"title": "Прямое изменение объектов или массивов состояния.", "isCorrect": false},
                    {"title": "Использование метода Array.push() для добавления элементов в массив состояния.", "isCorrect": false},
                    {"title": "Использование метода Object.assign() или оператора spread для создания копий объектов или массивов перед их изменением.", "isCorrect": true}
                ]
            }
        ]
    },
    "typescript": {
        "description":"Теоритеческие вопросы на знание TypeScript",
        "questions": [
            {
                "id": 1,
                "title": "В чем отличие отличие Omit от Exclude?",
                "description": "",
                "answers": [
                    {"title": "Omit<T, K extends keyof T> - выбирает свойства объекта типа T с ключами, указанными в K.", "isCorrect": false},
                    {"title": "Omit<UnionType, ExcludedMembers> - исключает определенные типы из объединенного типа.", "isCorrect": false},
                    {"title": "Omit<T, K extends keyof T> - выбирает свойства объекта типа T, исключая те, которые указаны в K", "isCorrect": true}
                ]
            },
            {
                "id": 2,
                "title": "Какой оператор используется для приведения типа в TypeScript?",
                "description": "",
                "answers": [
                    {"title": "is", "isCorrect": false},
                    {"title": "as", "isCorrect": true},
                    {"title": "typeof", "isCorrect": false}
                ]
            },
            {
                "id": 3,
                "title": "Что делает оператор keyof в TypeScript?",
                "description": "",
                "answers": [
                    {"title": "Возвращает значение ключей указанного типа объекта", "isCorrect": false},
                    {"title": "Возвращает тип ключей указанного типа объекта", "isCorrect": true},
                    {"title": "Проверяет, существует ли ключ в указанном объекте", "isCorrect": false}
                ]
            },
            {
                "id": 4,
                "title": "Что такое тип Never в TypeScript?",
                "description": "",
                "answers": [
                    {"title": "Тип, который представляет значение null или undefined", "isCorrect": false},
                    {"title": "Тип, который используется для функций, которые никогда не возвращают значение", "isCorrect": true},
                    {"title": "Тип, который используется для переменных, которые могут быть любого типа", "isCorrect": false}
                ]
            },
            {
                "id": 5,
                "title": "Для чего используется utility type Partial<T>?",
                "description": "",
                "answers": [
                    {"title": "Делает все свойства типа T обязательными", "isCorrect": false},
                    {"title": "Выбирает только указанные свойства типа T", "isCorrect": false},
                    {"title": "Делает все свойства типа T необязательными", "isCorrect": true}
                ]
            },
            {
                "id": 6,
                "title": "Что делает utility type Record<K, T>?",
                "description": "",
                "answers": [
                    {"title": "Создает тип объекта с ключами и значениями типа T", "isCorrect": false},
                    {"title": "Создает тип массива, где ключи и значения имеют тип K", "isCorrect": false},
                    {"title": "Создает тип объекта с ключами типа K и значениями типа T", "isCorrect": true}
                ]
            },
            {
                "id": 7,
                "title": "Какой из этих типов позволяет объединить несколько типов в один?",
                "description": "",
                "answers": [
                    {"title": "Union Type", "isCorrect": true},
                    {"title": "Intersection Type", "isCorrect": false},
                    {"title": "Mapped Type", "isCorrect": false}
                ]
            },
            {
                "id": 8,
                "title": "Какой из этих типов представляет собой пересечение нескольких типов?",
                "description": "",
                "answers": [
                    {"title": "Intersection Type", "isCorrect": true},
                    {"title": "Union Type", "isCorrect": false},
                    {"title": "Mapped Type", "isCorrect": false}
                ]
            },
            {
                "id": 9,
                "title": "Что такое utility type Readonly<T>?",
                "description": "",
                "answers": [
                    {"title": "Удаляет все свойства типа T", "isCorrect": false},
                    {"title": "Делает все свойства типа T доступными только для чтения", "isCorrect": true},
                    {"title": "Делает все свойства типа T обязательными", "isCorrect": false}
                ]
            },
            {
                "id": 10,
                "title": "Что означает тип Any в TypeScript?",
                "description": "",
                "answers": [
                    {"title": "Представляет значение, которое никогда не изменяется", "isCorrect": false},
                    {"title": "Представляет значение, которое всегда равно null", "isCorrect": false},
                    {"title": "Представляет значение любого типа", "isCorrect": true}
                ]
            },
            {
                "id": 11,
                "title": "Что произойдет, если использовать утверждение типа (type assertion) для приведения строки к числу?",
                "description": "",
                "answers": [
                    {"title": "Произойдет ошибка времени компиляции", "isCorrect": false},
                    {"title": "Строка будет преобразована в число", "isCorrect": false},
                    {"title": "Будет выполнено утверждение типа без фактического преобразования значения", "isCorrect": true}
                ]
            },
            {
                "id": 12,
                "title": "Что произойдет при попытке вызвать метод, отсутствующий в интерфейсе, на объекте, реализующем этот интерфейс?",
                "description": "",
                "answers": [
                    {"title": "Произойдет ошибка во время компиляции", "isCorrect": true},
                    {"title": "Метод будет вызван успешно, если объект имеет такой метод", "isCorrect": false},
                    {"title": "Произойдет ошибка времени выполнения", "isCorrect": false}
                ]
            },
            {
                "id": 13,
                "title": "Какой из следующих типов не существует в TypeScript?",
                "description": "",
                "answers": [
                    {"title": "never", "isCorrect": false},
                    {"title": "unknown", "isCorrect": false},
                    {"title": "maybe", "isCorrect": true}
                ]
            },
            {
                "id": 14,
                "title": "Какой из следующих типов лучше всего использовать для переменной, которая может принимать значение любого типа, но требует строгих проверок перед использованием?",
                "description": "",
                "answers": [
                    {"title": "unknown", "isCorrect": true},
                    {"title": "any", "isCorrect": false},
                    {"title": "object", "isCorrect": false}
                ]
            },
            {
                "id": 15,
                "title": "Чем отличается utility type Pick<T, K extends keyof T> от utility type Omit<T, K extends keyof any>?",
                "description": "",
                "answers": [
                    {"title": "Omit выбирает указанные свойства, а Pick исключает указанные свойства", "isCorrect": false},
                    {"title": "Pick и Omit являются синонимами и выполняют одно и то же", "isCorrect": false},
                    {"title": "Pick выбирает указанные свойства, а Omit исключает указанные свойства", "isCorrect": true}
                ]
            },
            {
                "id": 16,
                "title": "Какой тип возвращается функцией, которая никогда не завершает выполнение?",
                "description": "",
                "answers": [
                    {"title": "void", "isCorrect": false},
                    {"title": "null", "isCorrect": false},
                    {"title": "never", "isCorrect": true}
                ]
            },
            {
                "id": 17,
                "title": "Какая ошибка произойдет при попытке присвоить значение типа string переменной типа number с использованием ключевого слова let?",
                "description": "",
                "answers": [
                    {"title": "Ошибка времени выполнения", "isCorrect": false},
                    {"title": "Никакой ошибки не произойдет, значение будет автоматически преобразовано", "isCorrect": false},
                    {"title": "Ошибка времени компиляции", "isCorrect": true}
                ]
            },
            {
                "id": 18,
                "title": "Что произойдет, если попытаться использовать ключевое слово 'this' вне класса или объекта в TypeScript?",
                "description": "",
                "answers": [
                    {"title": "Будет ссылаться на глобальный объект (window в браузере)", "isCorrect": true},
                    {"title": "Будет ссылаться на undefined", "isCorrect": false},
                    {"title": "Будет ссылаться на саму функцию, в которой используется", "isCorrect": false}
                ]
            },
            {
                "id": 19,
                "title": "Какой из следующих методов можно использовать для создания частичного типа на основе существующего типа, делая некоторые или все свойства необязательными?",
                "description": "",
                "answers": [
                    {"title": "Readonly<T>", "isCorrect": false},
                    {"title": "Partial<T>", "isCorrect": true},
                    {"title": "Pick<T, K>", "isCorrect": false}
                ]
            },
            {
                "id": 20,
                "title": "Что произойдет, если тип переменной не указан явно и TypeScript не может вывести тип из контекста?",
                "description": "",
                "answers": [
                    {"title": "Произойдет ошибка времени компиляции", "isCorrect": false},
                    {"title": "Переменная получит тип unknown", "isCorrect": false},
                    {"title": "Переменная получит тип any", "isCorrect": true}
                ]
            }                           
        ]
    },
    "web": {
        "description": "Общие вопросы на знания WEB",
        "questions": [
            {
                "id": 1,
                "title": "Что такое HTML?",
                "description": "",
                "answers": [
                    {"title": "HTML - это язык программирования, используемый для создания интерактивных элементов на веб-страницах.", "isCorrect": false},
                    {"title": "HTML - это язык стилей, используемый для оформления внешнего вида веб-страниц.", "isCorrect": false},
                    {"title": "HTML (HyperText Markup Language) - это язык разметки, используемый для создания содержимого веб-страниц.", "isCorrect": true}
                ]
            },
            {
                "id": 2,
                "title": "Что такое CSS?",
                "description": "",
                "answers": [
                    {"title": "CSS - это язык разметки, который определяет структуру содержимого веб-страниц.", "isCorrect": false},
                    {"title": "CSS (Cascading Style Sheets) - это язык стилей, используемый для оформления внешнего вида веб-страниц.", "isCorrect": true},
                    {"title": "CSS - это язык программирования, используемый для создания динамических элементов на веб-страницах.", "isCorrect": false}
                ]
            },
            {
                "id": 3,
                "title": "Что такое JavaScript?",
                "description": "",
                "answers": [
                    {"title": "JavaScript - это язык программирования, который обеспечивает интерактивность на веб-страницах.", "isCorrect": true},
                    {"title": "JavaScript - это язык разметки, используемый для описания содержимого веб-страниц.", "isCorrect": false},
                    {"title": "JavaScript - это язык стилей, используемый для оформления внешнего вида веб-страниц.", "isCorrect": false}
                ]
            },
            {
                "id": 4,
                "title": "Что такое DOM в контексте веб-разработки?",
                "description": "",
                "answers": [
                    {"title": "DOM (Document Object Model) - это представление веб-страницы в виде дерева объектов, которое JavaScript может изменять.", "isCorrect": true},
                    {"title": "DOM - это стандарт, который определяет формат обмена данными между клиентом и сервером.", "isCorrect": false},
                    {"title": "DOM - это протокол, используемый для отправки электронной почты.", "isCorrect": false}
                ]
            },
            {
                "id": 5,
                "title": "Что такое API?",
                "description": "",
                "answers": [
                    {"title": "API - это формат данных, используемый для передачи информации между клиентом и сервером.", "isCorrect": false},
                    {"title": "API (Application Programming Interface) - это набор инструкций и структур данных, позволяющих различным программам взаимодействовать друг с другом.", "isCorrect": true},
                    {"title": "API - это структура, определяющая визуальное отображение веб-страницы.", "isCorrect": false}
                ]
            },
            {
                "id": 6,
                "title": "Что такое HTTP?",
                "description": "",
                "answers": [
                    {"title": "HTTP - это язык разметки, используемый для создания веб-страниц.", "isCorrect": false},
                    {"title": "HTTP - это язык программирования, который обеспечивает динамическое взаимодействие на веб-страницах.", "isCorrect": false},
                    {"title": "HTTP (HyperText Transfer Protocol) - это протокол передачи данных, используемый для обмена информацией в сети Интернет.", "isCorrect": true}
                ]
            },
            {
                "id": 7,
                "title": "Что такое HTTPS?",
                "description": "",
                "answers": [
                    {"title": "HTTPS - это протокол передачи данных, который используется для отправки электронной почты.", "isCorrect": false},
                    {"title": "HTTPS - это язык разметки, используемый для создания интерактивных элементов на веб-страницах.", "isCorrect": false},
                    {"title": "HTTPS (HyperText Transfer Protocol Secure) - это защищенная версия протокола HTTP, использующая шифрование для обеспечения безопасности данных.", "isCorrect": true}
                ]
            },
            {
                "id": 8,
                "title": "Что такое URL?",
                "description": "",
                "answers": [
                    {"title": "URL (Uniform Resource Locator) - это адрес ресурса в Интернете, который указывает на его местоположение.", "isCorrect": true},
                    {"title": "URL - это язык программирования, который используется для создания динамических элементов на веб-страницах.", "isCorrect": false},
                    {"title": "URL - это формат данных, используемый для описания структуры веб-страницы.", "isCorrect": false}
                ]
            },
            {
                "id": 9,
                "title": "Что такое CORS?",
                "description": "",
                "answers": [
                    {"title": "CORS - это протокол передачи данных, используемый для обмена информацией между клиентом и сервером.", "isCorrect": false},
                    {"title": "CORS (Cross-Origin Resource Sharing) - это механизм, который позволяет веб-страницам запросить доступ к ресурсам с другого источника.", "isCorrect": true},
                    {"title": "CORS - это формат данных, используемый для передачи информации между клиентом и сервером.", "isCorrect": false}
                ]
            },
            {
                "id": 10,
                "title": "Что такое кэширование веб-страниц?",
                "description": "",
                "answers": [
                    {"title": "Кэширование - это процесс передачи данных между клиентом и сервером с использованием промежуточных кэшей.", "isCorrect": false},
                    {"title": "Кэширование - это процесс передачи данных между веб-сервером и базой данных.", "isCorrect": false},
                    {"title": "Кэширование - это процесс временного хранения копий веб-страниц на компьютере пользователя или сервере, чтобы ускорить доступ к ним.", "isCorrect": true}
                ]
            },
            {
                "id": 11,
                "title": "Какой HTTP-метод используется для измения части записи в базе данных на серверe?",
                "description": "",
                "answers": [
                    {"title": "GET", "isCorrect": false},
                    {"title": "PUT", "isCorrect": false},
                    {"title": "POST", "isCorrect": false},
                    {"title": "PATCH", "isCorrect": true}
                ]
            },
            {
                "id": 12,
                "title": "Что такое медиа-запросы в CSS?",
                "description": "",
                "answers": [
                    {"title": "Медиа-запросы - это специальные HTTP-запросы, используемые для получения мультимедийных файлов с сервера.", "isCorrect": false},
                    {"title": "Медиа-запросы - это инструмент CSS, который позволяет настраивать стили для различных устройств и разрешений экрана.", "isCorrect": true},
                    {"title": "Медиа-запросы - это методы JavaScript, используемые для обработки мультимедийных данных на клиентской стороне.", "isCorrect": false}
                ]
            },
            {
                "id": 13,
                "title": "Что такое Flexbox в CSS?",
                "description": "",
                "answers": [
                    {"title": "Flexbox - это свойство CSS, которое позволяет создавать анимации и переходы между различными состояниями элементов.", "isCorrect": false},
                    {"title": "Flexbox - это модель CSS, которая обеспечивает более гибкое и эффективное распределение пространства между элементами в контейнере.", "isCorrect": true},
                    {"title": "Flexbox - это метод JavaScript, который обрабатывает данные, связанные с отображением элементов на веб-странице.", "isCorrect": false}
                ]
            },
            {
                "id": 14,
                "title": "Что такое реактивное программирование?",
                "description": "",
                "answers": [
                    {"title": "Реактивное программирование - это парадигма программирования, в которой данные и операции над ними автоматически синхронизируются.", "isCorrect": true},
                    {"title": "Реактивное программирование - это методология разработки программного обеспечения, основанная на взаимодействии между различными модулями.", "isCorrect": false},
                    {"title": "Реактивное программирование - это техника оптимизации производительности веб-приложений, основанная на кэшировании данных.", "isCorrect": false}
                ]
            },
            {
                "id": 15,
                "title": "Что такое RESTful API?",
                "description": "",
                "answers": [
                    {"title": "RESTful API - это формат данных, используемый для передачи информации между клиентом и сервером.", "isCorrect": false},
                    {"title": "RESTful API - это стандарт для описания интерфейсов приложений, который определяет способы взаимодействия между различными компонентами.", "isCorrect": false},
                    {"title": "RESTful API - это архитектурный стиль для построения веб-сервисов, который использует протокол HTTP для передачи данных.", "isCorrect": true}
                ]
            },
            {
                "id": 16,
                "title": "Что такое cookie в контексте веб-разработки?",
                "description": "",
                "answers": [
                    {"title": "Cookie - это специальный HTTP-заголовок, используемый для передачи информации о сессии между клиентом и сервером.", "isCorrect": false},
                    {"title": "Cookie - это небольшие фрагменты данных, отправляемые сервером и хранящиеся на компьютере пользователя, которые используются для отслеживания информации о пользователе.", "isCorrect": true},
                    {"title": "Cookie - это технология JavaScript, используемая для создания всплывающих окон и интерактивных элементов на веб-страницах.", "isCorrect": false}
                ]
            },
            {
                "id": 17,
                "title": "Что такое Single Page Application (SPA)?",
                "description": "",
                "answers": [
                    {"title": "Single Page Application (SPA) - это формат данных, используемый для передачи информации между клиентом и сервером.", "isCorrect": false},
                    {"title": "Single Page Application (SPA) - это методология разработки программного обеспечения, основанная на использовании единственного файла кода.", "isCorrect": false},
                    {"title": "Single Page Application (SPA) - это тип веб-приложения, который загружает единственную HTML-страницу и динамически обновляет её содержимое при взаимодействии с пользователем.", "isCorrect": true}
                ]
            },
            {
                "id": 18,
                "title": "Что такое WebSockets?",
                "description": "",
                "answers": [
                    {"title": "WebSockets - это протокол передачи данных, используемый для загрузки веб-страниц.", "isCorrect": false},
                    {"title": "WebSockets - это формат данных, используемый для передачи информации между клиентом и сервером.", "isCorrect": false},
                    {"title": "WebSockets - это технология, позволяющая устанавливать постоянное соединение между клиентом и сервером для обмена двусторонними сообщениями в реальном времени.", "isCorrect": true}
                ]
            },
            {
                "id": 19,
                "title": "Что такое асинхронное программирование?",
                "description": "",
                "answers": [
                    {"title": "Асинхронное программирование - это метод программирования, при котором операции выполняются независимо друг от друга и результаты возвращаются по мере готовности.", "isCorrect": true},
                    {"title": "Асинхронное программирование - это метод оптимизации производительности веб-приложений, основанный на кэшировании данных.", "isCorrect": false},
                    {"title": "Асинхронное программирование - это методология разработки программного обеспечения, которая подразумевает выполнение операций в определенном порядке.", "isCorrect": false}
                ]
            },
            {
                "id": 20,
                "title": "Что такое SQL Injection и как её предотвратить?",
                "description": "",
                "answers": [
                    {"title": "SQL Injection - это атака на базу данных, при которой злоумышленник внедряет зловредный SQL-код в запросы к базе данных, чтобы получить несанкционированный доступ к данным.", "isCorrect": true},
                    {"title": "SQL Injection - это метод аутентификации пользователей, который использует SQL-запросы для проверки правильности введенных данных.", "isCorrect": false},
                    {"title": "SQL Injection - это техника оптимизации производительности баз данных, основанная на использовании индексов.", "isCorrect": false}
                ]
            },
            {
                "id": 21,
                "title": "Что такое XSS (Cross-Site Scripting) и как его предотвратить?",
                "description": "",
                "answers": [
                    {"title": "XSS (Cross-Site Scripting) - это тип атаки на веб-приложения, при котором злоумышленник внедряет вредоносный JavaScript-код на веб-страницу, который выполняется в контексте пользователя.", "isCorrect": true},
                    {"title": "XSS (Cross-Site Scripting) - это метод аутентификации пользователей, который использует скрипты для проверки правильности введенных данных.", "isCorrect": false},
                    {"title": "XSS (Cross-Site Scripting) - это метод шифрования данных, используемый для передачи информации между клиентом и сервером.", "isCorrect": false}
                ]
            },
            {
                "id": 22,
                "title": "Что такое CSRF (Cross-Site Request Forgery) и как его предотвратить?",
                "description": "",
                "answers": [
                    {"title": "CSRF (Cross-Site Request Forgery) - это метод передачи данных между клиентом и сервером с использованием кэша.", "isCorrect": false},
                    {"title": "CSRF (Cross-Site Request Forgery) - это формат данных, используемый для передачи информации между различными веб-страницами.", "isCorrect": false},
                    {"title": "CSRF (Cross-Site Request Forgery) - это тип атаки на веб-приложения, при котором злоумышленник заставляет авторизованного пользователя выполнить нежелательные действия на сайте.", "isCorrect": true}
                ]
            },
            {
                "id": 23,
                "title": "Что такое WebAssembly и для чего он используется?",
                "description": "",
                "answers": [
                    {"title": "WebAssembly - это спецификация для создания интерфейсов приложений, которые обеспечивают взаимодействие между различными компонентами.", "isCorrect": false},
                    {"title": "WebAssembly - это низкоуровневая бинарная инструкция, которая может выполняться в веб-браузере, обеспечивая значительное ускорение производительности веб-приложений.", "isCorrect": true},
                    {"title": "WebAssembly - это методология разработки веб-приложений, основанная на использовании единого набора инструментов и технологий.", "isCorrect": false}
                ]
            },
            {
                "id": 24,
                "title": "Что такое Progressive Web App (PWA) и какие преимущества они предоставляют?",
                "description": "",
                "answers": [
                    {"title": "Progressive Web App (PWA) - это веб-приложения, которые используют современные веб-технологии для создания мобильного приложения с функциональностью и производительностью, аналогичной нативным приложениям.", "isCorrect": true},
                    {"title": "Progressive Web App (PWA) - это методология разработки веб-приложений, которая подразумевает постепенное внедрение новых функций и улучшений.", "isCorrect": false},
                    {"title": "Progressive Web App (PWA) - это стандарт для описания интерфейсов приложений, который определяет способы взаимодействия между различными компонентами.", "isCorrect": false}
                ]
            },
            {
                "id": 25,
                "title": "Что такое SSR (Server-Side Rendering) и зачем он нужен?",
                "description": "",
                "answers": [
                    {"title": "SSR (Server-Side Rendering) - это процесс генерации веб-страниц на сервере и отправки готового HTML-кода на клиент для отображения, что ускоряет время загрузки и повышает SEO-показатели.", "isCorrect": true},
                    {"title": "SSR (Server-Side Rendering) - это метод передачи данных между клиентом и сервером с использованием промежуточных кэшей.", "isCorrect": false},
                    {"title": "SSR (Server-Side Rendering) - это техника оптимизации производительности веб-приложений, основанная на использовании асинхронных запросов к серверу.", "isCorrect": false}
                ]
            },
            {
                "id": 26,
                "title": "Что такое GraphQL и как оно отличается от REST API?",
                "description": "",
                "answers": [
                    {"title": "GraphQL - это спецификация для создания интерфейсов приложений, которые обеспечивают взаимодействие между различными компонентами.", "isCorrect": false},
                    {"title": "GraphQL - это стандарт для описания структуры данных в веб-приложениях, который определяет формат обмена данными между клиентом и сервером.", "isCorrect": false},
                    {"title": "GraphQL - это язык запросов для API и среда выполнения запросов, который позволяет клиентам запрашивать только те данные, которые им нужны, и объединять несколько запросов в один.", "isCorrect": true}
                ]
            },
            {
                "id": 27,
                "title": "Что такое WebRTC и какие возможности он предоставляет?",
                "description": "",
                "answers": [
                    {"title": "WebRTC - это метод передачи данных между клиентом и сервером с использованием веб-сокетов.", "isCorrect": false},
                    {"title": "WebRTC - это стандарт для создания мультимедийных элементов на веб-страницах с использованием HTML5 и JavaScript.", "isCorrect": false},
                    {"title": "WebRTC - это открытый проект, который позволяет веб-приложениям осуществлять реальное временное взаимодействие через видео- и аудиосвязь прямо в браузере без дополнительных плагинов.", "isCorrect": true}
                ]
            },
            {
                "id": 28,
                "title": "Что такое Shadow DOM в контексте веб-разработки?",
                "description": "",
                "answers": [
                    {"title": "Shadow DOM - это спецификация веб-стандартов, которая позволяет скрывать и изолировать внутреннее содержимое компонента от внешнего мира, что обеспечивает большую гибкость и безопасность при разработке веб-приложений.", "isCorrect": true},
                    {"title": "Shadow DOM - это методология разработки веб-приложений, которая подразумевает использование теневых (виртуальных) элементов для отображения скрытых данных на странице.", "isCorrect": false},
                    {"title": "Shadow DOM - это технология JavaScript, которая позволяет создавать эффекты тени для веб-элементов.", "isCorrect": false}
                ]
            },
            {
                "id": 29,
                "title": "Что такое микросервисная архитектура и какие преимущества она предоставляет?",
                "description": "",
                "answers": [
                    {"title": "Микросервисная архитектура - это метод передачи данных между клиентом и сервером с использованием микросервисов.", "isCorrect": false},
                    {"title": "Микросервисная архитектура - это подход к разработке программного обеспечения, при котором приложение состоит из набора независимых сервисов, каждый из которых выполняет свою уникальную функцию и может масштабироваться независимо.", "isCorrect": true},
                    {"title": "Микросервисная архитектура - это стандарт для организации взаимодействия между различными компонентами веб-приложения.", "isCorrect": false}
                ]
            },
            {
                "id": 30,
                "title": "Что такое Webpack и для чего он используется?",
                "description": "",
                "answers": [
                    {"title": "Webpack - это фреймворк JavaScript, который облегчает создание динамических веб-приложений.", "isCorrect": false},
                    {"title": "Webpack - это инструмент сборки для JavaScript-приложений, который позволяет объединять и оптимизировать различные модули и зависимости вашего проекта для повышения производительности и управления зависимостями.", "isCorrect": true},
                    {"title": "Webpack - это методология разработки веб-приложений, которая подразумевает использование модульной структуры для организации кода.", "isCorrect": false}
                ]
            },
            {
                "id": 31,
                "title": "Что такое контейнеризация?",
                "description": "",
                "answers": [
                    {"title": "Контейнеризация - это методология виртуализации, при которой приложение и его зависимости упаковываются в контейнер, который может быть запущен на любой совместимой с контейнером платформе.", "isCorrect": true},
                    {"title": "Контейнеризация - это процесс создания и управления контейнерами для хранения и обработки данных в веб-приложениях.", "isCorrect": false},
                    {"title": "Контейнеризация - это метод хранения и передачи данных между клиентом и сервером с использованием контейнеров.", "isCorrect": false}
                ]
            },
            {
                "id": 32,
                "title": "Что такое Big O нотация и как она используется в анализе временной и пространственной сложности алгоритмов?",
                "description": "",
                "answers": [
                    {"title": "Big O нотация - это математическая нотация, используемая для оценки асимптотической верхней границы (наихудшего случая) временной или пространственной сложности алгоритмов в зависимости от размера входных данных.", "isCorrect": true},
                    {"title": "Big O нотация - это стандарт для описания интерфейсов приложений, который определяет способы взаимодействия между различными компонентами веб-приложений.", "isCorrect": false},
                    {"title": "Big O нотация - это метод шифрования данных, используемый для защиты информации в веб-приложениях.", "isCorrect": false}
                ]
            },
            {
                "id": 33,
                "title": "Что такое блокчейн и какие преимущества он предоставляет для веб-разработки?",
                "description": "",
                "answers": [
                    {"title": "Блокчейн - это технология JavaScript, которая позволяет создавать интерактивные и анимированные элементы на веб-страницах.", "isCorrect": false},
                    {"title": "Блокчейн - это методология разработки веб-приложений, основанная на использовании цифровых подписей для защиты данных от несанкционированного доступа.", "isCorrect": false},
                    {"title": "Блокчейн - это децентрализованная база данных, которая записывает транзакции в виде блоков, связанных между собой цепочкой, что обеспечивает прозрачность, безопасность и надежность при обмене данными и цифровыми активами в сети.", "isCorrect": true}
                ]
            },
            {
                "id": 34,
                "title": "Что такое машинное обучение и как его можно использовать в веб-разработке?",
                "description": "",
                "answers": [
                    {"title": "Машинное обучение - это метод разработки веб-приложений, который основан на использовании готовых библиотек и фреймворков для создания динамических и интерактивных интерфейсов.", "isCorrect": false},
                    {"title": "Машинное обучение - это подраздел искусственного интеллекта, который позволяет компьютерным системам обучаться на основе опыта и данных, что позволяет создавать интеллектуальные системы, способные адаптироваться и улучшаться с течением времени.", "isCorrect": true},
                    {"title": "Машинное обучение - это спецификация для создания интерфейсов приложений, которые обеспечивают взаимодействие между различными компонентами веб-приложений.", "isCorrect": false}
                ]
            },
            {
                "id": 35,
                "title": "Что такое алгоритмическая сложность и как она влияет на производительность веб-приложений?",
                "description": "",
                "answers": [
                    {"title": "Алгоритмическая сложность - это мера количества ресурсов, необходимых для выполнения алгоритма, таких как время и память, что может оказывать влияние на производительность веб-приложений при обработке больших объемов данных или выполнении сложных операций.", "isCorrect": true},
                    {"title": "Алгоритмическая сложность - это методика разработки веб-приложений, которая подразумевает использование определенных алгоритмов для обработки данных и управления интерфейсом.", "isCorrect": false},
                    {"title": "Алгоритмическая сложность - это формат данных, используемый для передачи информации между клиентом и сервером с использованием алгоритмов шифрования.", "isCorrect": false}
                ]
            },
            {
                "id": 36,
                "title": "Что такое алгоритм SHA-256 и как он используется в веб-разработке?",
                "description": "",
                "answers": [
                    {"title": "SHA-256 - это спецификация для создания интерфейсов приложений, которые обеспечивают взаимодействие между различными компонентами веб-приложений.", "isCorrect": false},
                    {"title": "SHA-256 - это криптографический хэш-алгоритм, который принимает на вход сообщение произвольной длины и вычисляет для него уникальный хэш-код фиксированной длины 256 бит, который может быть использован для создания цифровых подписей, хэширования паролей и обеспечения целостности данных в веб-разработке.", "isCorrect": true},
                    {"title": "SHA-256 - это метод аутентификации пользователей, который использует хэширование данных для проверки правильности введенных данных.", "isCorrect": false}
                ]
            },
            {
                "id": 37,
                "title": "Что такое функциональное программирование и как оно применяется в веб-разработке?",
                "description": "",
                "answers": [
                    {"title": "Функциональное программирование - это парадигма программирования, в которой программы рассматриваются как вычисления функций и составляются из чистых функций без побочных эффектов, что позволяет создавать более надежные, модульные и масштабируемые веб-приложения.", "isCorrect": true},
                    {"title": "Функциональное программирование - это методология разработки веб-приложений, которая подразумевает использование функциональных компонентов для создания интерфейса и обработки данных.", "isCorrect": false},
                    {"title": "Функциональное программирование - это метод передачи данных между клиентом и сервером с использованием функций для обработки информации.", "isCorrect": false}
                ]
            },
            {
                "id": 38,
                "title": "Какой способ хранения токена предпочтителен для безопасности и эффективности веб-приложений: хранение в куках (cookies) или в локальном хранилище (localStorage)? Почему?",
                "description": "",
                "answers": [
                    {"title": "Хранение токена в куках (cookies) обычно является более безопасным вариантом, поскольку куки могут быть настроены с флагом HttpOnly, который предотвращает доступ к ним через JavaScript, тем самым снижая вероятность утечки токена при атаках XSS. Однако, локальное хранилище (localStorage) может быть более эффективным вариантом для приложений, не требующих высокого уровня безопасности и подверженных атакам CSRF.", "isCorrect": true},
                    {"title": "Хранение токена в локальном хранилище (localStorage) обычно является более безопасным вариантом, поскольку данные хранятся на стороне клиента и могут быть использованы только для конкретного домена, тем самым предотвращая утечку токена при атаках XSS. Однако, куки (cookies) могут быть более эффективным вариантом для приложений, требующих высокого уровня безопасности и защиты от атак CSRF.", "isCorrect": false},
                    {"title": "Оба способа хранения токена имеют свои преимущества и недостатки, и выбор между ними зависит от конкретных требований безопасности и функциональности приложения, а также от сценариев использования токена и потенциальных угроз безопасности.", "isCorrect": false}
                ]
            },
            {
                "id": 39,
                "title": "Чем отличается аутентификация от авторизации в контексте веб-разработки?",
                "description": "",
                "answers": [
                    {"title": "Аутентификация - это процесс предоставления пользователю доступа к ресурсам или функциональности в системе, например, путем выдачи токена доступа. Авторизация, с другой стороны, это процесс проверки подлинности пользователей путем запроса у них учетных данных, таких как логин и пароль.", "isCorrect": false},
                    {"title": "Аутентификация - это процесс проверки подлинности пользователей, который подтверждает их идентичность, например, с помощью ввода логина и пароля. Авторизация, с другой стороны, это процесс определения прав доступа пользователей к определенным ресурсам или функциональности в системе после успешной аутентификации.", "isCorrect": true},
                    {"title": "Аутентификация - это процесс проверки прав доступа пользователей к определенным ресурсам или функциональности в системе. Авторизация, с другой стороны, это процесс предоставления пользователю доступа к ресурсам или функциональности в системе после успешной аутентификации.", "isCorrect": false}
                ]
            }
        ]
    },
    "docker": {
        "description": "Вопросы на знание Docker и контейнеризации в целом",
        "questions": [
            {
                "id": 1,
                "title": "Что такое Docker?",
                "description": "",
                "answers": [
                    {"title": "Docker - это платформа для разработки, доставки и запуска приложений в контейнерах.", "isCorrect": true},
                    {"title": "Docker - это инструмент для управления виртуальными машинами.", "isCorrect": false},
                    {"title": "Docker - это язык программирования для создания веб-приложений.", "isCorrect": false}
                ]
            },
            {
                "id": 2,
                "title": "Чем контейнеры Docker отличаются от виртуальных машин?",
                "description": "",
                "answers": [
                    {"title": "Контейнеры Docker используют общее ядро и разделяют ресурсы с хост-системой, в то время как виртуальные машины изолируются полностью и имеют собственное ядро операционной системы.", "isCorrect": true},
                    {"title": "Контейнеры Docker требуют гипервизор для работы, виртуальные машины нет.", "isCorrect": false},
                    {"title": "Виртуальные машины легче и быстрее чем контейнеры Docker.", "isCorrect": false},
                    {"title": "Контейнеры Docker используют общие ресурсы с другими контейнерами, виртуальные машины нет.", "isCorrect": false}
                ]
            },
            {
                "id": 3,
                "title": "Что такое Dockerfile?",
                "description": "",
                "answers": [
                    {"title": "Dockerfile - это текстовый файл, содержащий инструкции для создания образа Docker.", "isCorrect": true},
                    {"title": "Dockerfile - это скрипт для запуска контейнера Docker.", "isCorrect": false},
                    {"title": "Dockerfile - это документация для проекта Docker.", "isCorrect": false}
                ]
            },
            {
                "id": 4,
                "title": "Как создать образ Docker из Dockerfile?",
                "description": "",
                "answers": [
                    {"title": "Для создания образа Docker из Dockerfile используется команда docker build.", "isCorrect": true},
                    {"title": "Для создания образа Docker из Dockerfile используется команда docker run.", "isCorrect": false},
                    {"title": "Для создания образа Docker из Dockerfile используется команда docker push.", "isCorrect": false}
                ]
            },
            {
                "id": 5,
                "title": "Какие инструкции можно использовать в Dockerfile?",
                "description": "",
                "answers": [
                    {"title": "FROM, RUN, COPY, CMD, EXPOSE, ENV и другие.", "isCorrect": true},
                    {"title": "START, EXEC, ADD, PORT, CONFIGURE.", "isCorrect": false},
                    {"title": "BUILD, INSTALL, CONFIGURE, EXECUTE.", "isCorrect": false}
                ]
            },
            {
                "id": 6,
                "title": "Что такое образ Docker?",
                "description": "",
                "answers": [
                    {"title": "Образ Docker - это статический шаблон, из которого создаются контейнеры Docker.", "isCorrect": true},
                    {"title": "Образ Docker - это контейнер с запущенным приложением.", "isCorrect": false},
                    {"title": "Образ Docker - это инструмент для упаковки кода приложения.", "isCorrect": false}
                ]
            },
            {
                "id": 7,
                "title": "Какие команды используются для управления контейнерами Docker?",
                "description": "",
                "answers": [
                    {"title": "docker run, docker start, docker stop, docker rm и др.", "isCorrect": true},
                    {"title": "docker create, docker destroy, docker pause, docker resume и др.", "isCorrect": false},
                    {"title": "docker build, docker push, docker pull, docker commit и др.", "isCorrect": false}
                ]
            },
            {
                "id": 8,
                "title": "Что такое Docker Hub?",
                "description": "",
                "answers": [
                    {"title": "Docker Hub - это облачное хранилище образов Docker.", "isCorrect": true},
                    {"title": "Docker Hub - это сервер для запуска контейнеров Docker.", "isCorrect": false},
                    {"title": "Docker Hub - это веб-интерфейс для управления контейнерами Docker.", "isCorrect": false}
                ]
            },
            {
                "id": 9,
                "title": "Какие преимущества использования Docker?",
                "description": "",
                "answers": [
                    {"title": "Изоляция приложений, удобство развертывания, масштабируемость, переносимость и др.", "isCorrect": true},
                    {"title": "Больше возможностей для мониторинга, управления и конфигурации приложений.", "isCorrect": false},
                    {"title": "Более высокая производительность и меньший расход ресурсов по сравнению с виртуальными машинами.", "isCorrect": false}
                ]
            }
        ]
    },
    "git": {
        "description":"Вопросы на знания системы контроля версий Git",
        "questions": [
            {
                "id": 1,
                "title": "Что такое система контроля версий?",
                "description": "",
                "answers": [
                    {"title": "Система контроля версий - это специальное программное обеспечение для управления проектами.", "isCorrect": false},
                    {"title": "Система контроля версий - это онлайн-сервис для обмена файлами.", "isCorrect": false},
                    {"title": "Система контроля версий (Version Control System, VCS) - это система, позволяющая отслеживать изменения в файловой системе, историю изменений и совместную работу над проектами.", "isCorrect": true}
                ]
            },
            {
                "id": 2,
                "title": "Что такое Git?",
                "description": "",
                "answers": [
                    {"title": "Git - это распределенная система контроля версий, разработанная Линусом Торвальдсом.", "isCorrect": true},
                    {"title": "Git - это централизованная система контроля версий, разработанная Microsoft.", "isCorrect": false},
                    {"title": "Git - это веб-сервис для хранения кода и совместной разработки проектов.", "isCorrect": false}
                ]
            },
            {
                "id": 3,
                "title": "Что такое репозиторий Git?",
                "description": "",
                "answers": [
                    {"title": "Репозиторий Git - это хранилище файлов, содержащее все версии проекта и историю их изменений.", "isCorrect": true},
                    {"title": "Репозиторий Git - это компьютер, на котором размещается проект для совместной работы.", "isCorrect": false},
                    {"title": "Репозиторий Git - это веб-сервис для управления задачами и планирования проектов.", "isCorrect": false}
                ]
            },
            {
                "id": 4,
                "title": "Как создать новый репозиторий в Git?",
                "description": "",
                "answers": [
                    {"title": "С помощью команды git clone.", "isCorrect": false},
                    {"title": "С помощью команды git init.", "isCorrect": true},
                    {"title": "С помощью команды git add.", "isCorrect": false}
                ]
            },
            {
                "id": 5,
                "title": "Как добавить файлы в индекс Git?",
                "description": "",
                "answers": [
                    {"title": "С помощью команды git add.", "isCorrect": true},
                    {"title": "С помощью команды git commit.", "isCorrect": false},
                    {"title": "С помощью команды git push.", "isCorrect": false}
                ]
            },
            {
                "id": 6,
                "title": "Что такое коммит в Git?",
                "description": "",
                "answers": [
                    {"title": "Коммит в Git - это команда для добавления файлов в индекс.", "isCorrect": false},
                    {"title": "Коммит в Git - это команда для отправки изменений на удаленный сервер.", "isCorrect": false},
                    {"title": "Коммит в Git - это сохранение изменений в репозитории с сообщением, описывающим изменения.", "isCorrect": true}
                ]
            },
            {
                "id": 7,
                "title": "Как отправить изменения из локального репозитория на удаленный сервер в Git?",
                "description": "",
                "answers": [
                    {"title": "С помощью команды git pull.", "isCorrect": false},
                    {"title": "С помощью команды git push.", "isCorrect": true},
                    {"title": "С помощью команды git commit.", "isCorrect": false}
                ]
            },
            {
                "id": 8,
                "title": "Что такое ветка (branch) в Git?",
                "description": "",
                "answers": [
                    {"title": "Ветка (branch) в Git - это команда для слияния изменений из одной ветки в другую.", "isCorrect": false},
                    {"title": "Ветка (branch) в Git - это отдельная линия разработки, которая содержит набор коммитов.", "isCorrect": true},
                    {"title": "Ветка (branch) в Git - это удаленный сервер для хранения репозитория.", "isCorrect": false}
                ]
            },
            {
                "id": 9,
                "title": "Как создать новую ветку в Git?",
                "description": "",
                "answers": [
                    {"title": "С помощью команды git branch.", "isCorrect": true},
                    {"title": "С помощью команды git checkout.", "isCorrect": false},
                    {"title": "С помощью команды git commit.", "isCorrect": false}
                ]
            },
            {
                "id": 10,
                "title": "Как выполнить слияние веток в Git?",
                "description": "",
                "answers": [
                    {"title": "С помощью команды git branch.", "isCorrect": false},
                    {"title": "С помощью команды git checkout.", "isCorrect": false},
                    {"title": "С помощью команды git merge.", "isCorrect": true}
                ]
            },
            {
                "id": 11,
                "title": "Что такое rebase в Git и в чем его отличие от merge?",
                "description": "",
                "answers": [
                    {"title": "Merge - это процесс объединения изменений из одной ветки в другую, сохраняя историю коммитов каждой ветки.", "isCorrect": false},
                    {"title": "Rebase - это процесс создания новой ветки на основе текущего состояния другой ветки.", "isCorrect": false},
                    {"title": "Rebase - это процесс переписывания истории коммитов, применения изменений из одной ветки к другой, создания линейной истории.", "isCorrect": true}
                ]
            },
            {
                "id": 12,
                "title": "Какие есть способы отмены изменений в Git?",
                "description": "",
                "answers": [
                    {"title": "С помощью команды git reset.", "isCorrect": true},
                    {"title": "С помощью команды git revert.", "isCorrect": false},
                    {"title": "С помощью команды git checkout.", "isCorrect": false},
                    {"title": "С помощью команды git stash.", "isCorrect": false}
                ]
            },
            {
                "id": 13,
                "title": "Что такое Git squash?",
                "description": "",
                "answers": [
                    {"title": "Squash - это команда для переключения между ветками в Git.", "isCorrect": false},
                    {"title": "Squash - это процесс объединения нескольких коммитов в один, чтобы сделать историю проекта более понятной и компактной.", "isCorrect": true},
                    {"title": "Squash - это команда для удаления веток в Git.", "isCorrect": false}
                ]
            },
            {
                "id": 14,
                "title": "Что такое Git cherry-pick?",
                "description": "",
                "answers": [
                    {"title": "Cherry-pick - это процесс применения выбранных коммитов из одной ветки в другую, без необходимости слияния всей ветки.", "isCorrect": true},
                    {"title": "Cherry-pick - это команда для создания копии удаленного репозитория.", "isCorrect": false},
                    {"title": "Cherry-pick - это команда для создания новой ветки на основе последнего коммита другой ветки.", "isCorrect": false}
                ]
            },
            {
                "id": 15,
                "title": "Как Git хранит данные?",
                "description": "",
                "answers": [
                    {"title": "Git хранит данные в виде текстовых файлов на сервере.", "isCorrect": false},
                    {"title": "Git хранит данные в виде JSON-файлов в локальном репозитории.", "isCorrect": false},
                    {"title": "Git хранит данные в виде объектов, таких как коммиты, деревья и блобы, в своей базе данных.", "isCorrect": true}
                ]
            },
            {
                "id": 16,
                "title": "Что такое Git hook и какие виды хуков существуют?",
                "description": "",
                "answers": [
                    {"title": "Git hook - это специальные символы, используемые для обозначения конкретных моментов в истории коммитов.", "isCorrect": false},
                    {"title": "Git hook - это скрипты, запускаемые автоматически при определенных событиях в Git, такие как коммит или отправка изменений.", "isCorrect": true},
                    {"title": "Git hook - это команды для удаления истории коммитов в репозитории.", "isCorrect": false}
                ]
            },
            {
                "id": 17,
                "title": "Как работает Git bisect?",
                "description": "",
                "answers": [
                    {"title": "Git bisect - это инструмент для автоматизации процесса поиска коммита, в котором возникла ошибка, путем бинарного поиска.", "isCorrect": true},
                    {"title": "Git bisect - это команда для создания резервной копии локального репозитория.", "isCorrect": false},
                    {"title": "Git bisect - это команда для создания новой ветки на основе определенного коммита.", "isCorrect": false}
                ]
            },
            {
                "id": 18,
                "title": "Что такое Git subtree?",
                "description": "",
                "answers": [
                    {"title": "Git subtree - это инструмент для работы с вложенными репозиториями как с частью основного репозитория.", "isCorrect": true},
                    {"title": "Git subtree - это команда для объединения нескольких веток в одну в Git.", "isCorrect": false},
                    {"title": "Git subtree - это специальный тип ветки в Git.", "isCorrect": false}
                ]
            },
            {
                "id": 19,
                "title": "Как использовать Git LFS?",
                "description": "",
                "answers": [
                    {"title": "Git LFS - это команда для удаления больших файлов из репозитория.", "isCorrect": false},
                    {"title": "Git LFS - это команда для слияния веток в Git.", "isCorrect": false},
                    {"title": "Git LFS (Large File Storage) - это расширение Git для управления большими файлами, хранящимися в отдельном хранилище.", "isCorrect": true}
                ]
            }
        ]
    },
    "vue": {
        "description":"Теоритеческие вопросы на знание Vue.js",
        "questions": []
    },
    "node.js": {
        "description":"Теоритеческие вопросы на знание Node.js",
        "questions": []
    },
    "python": {
        "description":"Теоритеческие вопросы на знание Python",
        "questions": []
    },
    "next.js": {
        "description":"Теоритеческие вопросы на знание Python",
        "questions": []
    },
    "algorithms": {
        "description":"Знания алгоритмов и структур данных",
        "questions": []
    }
}